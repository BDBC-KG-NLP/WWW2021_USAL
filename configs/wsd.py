import argparse

def parse_args(args):
    parser = argparse.ArgumentParser()
    parser.add_argument('--print_every',type = int,default =20,help = 'test')
    parser.add_argument('--lr_ratio', type=float, default=0.1, help="subsample threshold")
    parser.add_argument('--lr', type=float, default=1e-3, help="subsample threshold")
    parser.add_argument('--weight_decay',type = float,default = 0,help = '')
    parser.add_argument('--weight_power',type = float,default = 0.75,help = 'power')
    parser.add_argument('--train_w2v',action = 'store_true',default = False,help ='')
    parser.add_argument('--name', type=str, default='sgns', help="model name")
    parser.add_argument('--datapath', type=str, default='data/All_Words_WSD/Evaluation_Datasets/ALL/ALL_data_em.json', help="data directory path")
    parser.add_argument('--dim_embed', type=int, default=300, help="embedding dimension")
    parser.add_argument('--hidden_dim',type =int,default = 300,help='hidden dimension')
    parser.add_argument('--bidirectional',action='store_true',default=False)
    parser.add_argument('--n_negs', type=int, default=1, help="number of negative samples")
    parser.add_argument('--use_tf',action = 'store_true',default = False,help = 'weather use tf to test')
    parser.add_argument('--epoch', type=int, default=10, help="number of epochs")
    parser.add_argument('--init_steps', type=int, default=500, help="number of epochs")
    parser.add_argument('--init_stop', type=int, default=10, help="number of epochs")
    parser.add_argument('--update_steps', type=int, default=10, help="number of epochs")
    parser.add_argument('--mb', type=int, default=128, help="mini-batch size")
    parser.add_argument('--optim',type = str,default = 'adam',help = 'optimer')
    parser.add_argument('--do_train',action = 'store_true',default =  False,help = 'train')
    parser.add_argument('--conti', action='store_true',help="continue learning")
    parser.add_argument('--cuda', action='store_true', default = True,help="use CUDA")
    parser.add_argument('--doc_size',type=int,default=11412,help = 'testal number of docs')
    parser.add_argument('--avg_dl', type=float, default=26, help="subsample threshold")
    parser.add_argument('--w2vpath',type = str,default = 'data/All_Words_WSD/Training_Corpora/semcor/vecs_emexpand.npy',help ="path of word embedding")
    parser.add_argument('--data_dir',type = str,default = 'data/All_Words_WSD/Training_Corpora/semcor/',help = '')
    parser.add_argument('--vocab_path',type = str,default = 'data/All_Words_WSD/Training_Corpora/semcor/vocab_emexpand.json',help = '')
    parser.add_argument('--test_path',type = str,default = 'data/All_Words_WSD/Evaluation_Datasets/ALL/',help = '')
    parser.add_argument('--train_path',type = str,default = 'data/All_Words_WSD/Training_Corpora/semcor/semcor_data_emexpand.json',help = '')
    parser.add_argument('--dev_path',type = str,default = 'data/All_Words_WSD/Evaluation_Datasets/ALL/ALL_val_data_emexpand.json',help = '')
    parser.add_argument('--query_path',type = str,default = 'data/All_Words_WSD/Training_Corpora/semcor/querys_emexpand.json',help = '')
    parser.add_argument('--docs_path',type = str,default = 'data/All_Words_WSD/Training_Corpora/semcor/docs_em.json',help = '')
    parser.add_argument('--doc2id_path',type = str,default = 'data/All_Words_WSD/Training_Corpora/semcor/doc2id_em.json',help = '')
    parser.add_argument('--gloss_path',type=str,default='data/All_Words_WSD/Training_Corpora/semcor/testgloss_emexpand.json')
    parser.add_argument('--preds_path',type=str,default='data/All_Words_WSD/Training_Corpora/semcor/preds_emexpand.json')
    parser.add_argument('--negpreds_path',type=str,default='data/All_Words_WSD/Training_Corpora/semcor/negpreds_emexpand.json')
    parser.add_argument('--gold_path',type = str,default = 'data/All_Words_WSD/Evaluation_Datasets/ALL/ALL.gold.key.txt',help = '')
    parser.add_argument('--val_gold_path', type=str, default='data/All_Words_WSD/Evaluation_Datasets/semeval2007/semeval2007.gold.key.txt',help='')
    parser.add_argument('--attention_k',type = int,default = 100)
    parser.add_argument('--model_path',type = str,default = None)
    parser.add_argument('--generater_path',type=str,default = None)
    parser.add_argument('--model_type',type = str,default = 'sgns')
    parser.add_argument('--max_len',type= int,default = 10000)
    parser.add_argument('--case_study',action='store_true',default = False)
    parser.add_argument('--case_query',type = str,default = '')
    parser.add_argument('--case_doc',type = str,default = '')
    parser.add_argument('--dropout',type = float,default = 0.5)
    parser.add_argument('--elmo_options_file',type =str,default = 'configs/original_options.json')
    parser.add_argument('--elmo_weights_file',type = str,default = 'configs/original_weights.hdf5')
    parser.add_argument('--min_lr',type = float,default = 0.00006)
    parser.add_argument('--lr_decay_rate',type = float,default = 0.95)
    parser.add_argument('--lr_warmup_steps',type = float,default = 100)
    parser.add_argument('--pmi_w2vpath',type=str,default = '')
    parser.add_argument('--margin',type =float,default = 0.1)
    parser.add_argument('--traingenfirst',action = 'store_true',default = False)
    parser.add_argument('--metric',type= str,default = 'MAP')
    parser.add_argument('--alpha',type= float,default = 0.035)
    parser.add_argument('--layers',type=int,default = 2)
    parser.add_argument('--seed',type=int,default = 726)
    parser.add_argument('--weight_k',type=float,default = 0.25)
    parser.add_argument('--freeze',type=int,default=35736)
    parser.add_argument('--error_analysis',action='store_true',default=False)
    parser.add_argument('--bert_path',type=str,default='bert-base-uncased')
    parser.add_argument('--max_grad_norm',type=float,default=1.0)
    parser.add_argument('--sample_num',type=int,default=1)
    parser.add_argument('--only_test',action='store_true',default=False)
    parser.add_argument('--merge_gloss',action='store_true',default=False)
    parser.add_argument('--labeled',action='store_true',default=False)
    parser.add_argument('--eloss_weight',type=float,default=1.0)
    return parser.parse_args(args)
